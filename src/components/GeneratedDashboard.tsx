import React from 'react';
import { DashboardConfig } from '../types';
import { DynamicMetricCard } from './DynamicMetricCard';
import { DynamicChart } from './DynamicChart';
import { RefreshCw, Download, Share2 } from 'lucide-react';

interface GeneratedDashboardProps {
  config: DashboardConfig;
  aiResponse: string;
  onReset: () => void;
}

export const GeneratedDashboard: React.FC<GeneratedDashboardProps> = ({ 
  config, 
  aiResponse, 
  onReset 
}) => {
  const getThemeGradient = () => {
    switch (config.theme) {
      case 'green': return 'from-green-50 via-white to-emerald-50';
      case 'purple': return 'from-purple-50 via-white to-indigo-50';
      case 'orange': return 'from-orange-50 via-white to-amber-50';
      case 'red': return 'from-red-50 via-white to-rose-50';
      default: return 'from-blue-50 via-white to-indigo-50';
    }
  };

  const getThemeColor = () => {
    switch (config.theme) {
      case 'green': return 'text-green-600';
      case 'purple': return 'text-purple-600';
      case 'orange': return 'text-orange-600';
      case 'red': return 'text-red-600';
      default: return 'text-blue-600';
    }
  };

  const handleExport = () => {
    const exportData = {
      dashboard: config,
      generatedAt: new Date().toISOString(),
      aiResponse
    };
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], {
      type: 'application/json'
    });
    
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${config.title.toLowerCase().replace(/\s+/g, '-')}-dashboard.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className={`min-h-screen bg-gradient-to-br ${getThemeGradient()} p-6`}>
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">{config.title}</h1>
              <p className="text-gray-600">{config.description}</p>
            </div>
            <div className="flex items-center gap-3">
              <button
                onClick={handleExport}
                className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center gap-2"
                title="Export Dashboard"
              >
                <Download className="w-4 h-4" />
              </button>
              <button
                onClick={onReset}
                className="px-4 py-2 bg-gray-900 text-white rounded-lg hover:bg-gray-800 transition-colors flex items-center gap-2"
              >
                <RefreshCw className="w-4 h-4" />
                New Dashboard
              </button>
            </div>
          </div>

          {/* AI Response */}
          <div className="bg-white/80 backdrop-blur-sm p-4 rounded-lg border border-gray-200 mb-6">
            <div className="flex items-start gap-3">
              <div className={`w-2 h-2 rounded-full ${getThemeColor().replace('text-', 'bg-')} mt-2`}></div>
              <p className="text-gray-700 text-sm leading-relaxed">{aiResponse}</p>
            </div>
          </div>
        </div>

        {/* Metrics Grid */}
        {config.metrics && config.metrics.length > 0 && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            {config.metrics.map((metric) => (
              <DynamicMetricCard
                key={metric.id}
                metric={metric}
                theme={config.theme}
              />
            ))}
          </div>
        )}

        {/* Charts Grid */}
        {config.charts && config.charts.length > 0 && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {config.charts.map((chart) => (
              <DynamicChart key={chart.id} chart={chart} />
            ))}
          </div>
        )}

        {/* Footer */}
        <div className="mt-8 pt-6 border-t border-gray-200 text-center">
          <p className="text-sm text-gray-500">
            Dashboard generated by AI â€¢ {new Date().toLocaleDateString()}
          </p>
        </div>
      </div>
    </div>
  );
};